@page "/register/{title?}"

@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject EventEaseApp.Services.UserSessionService UserSession
@inject EventEaseApp.Services.AttendanceService AttendanceService

@* Remove or comment out links like: *@
@* <NavLink href="counter">Counter</NavLink> *@
@* <NavLink href="weather">Weather</NavLink> *@

<h3>Register for: @(string.IsNullOrWhiteSpace(title) ? "Event" : title)</h3>

<EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="registrationModel.Name" />
        <ValidationMessage For="@(() => registrationModel.Name)" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
        <ValidationMessage For="@(() => registrationModel.Email)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (success)
{
    <div class="alert alert-success mt-3">
        Registration successful for @(string.IsNullOrWhiteSpace(title) ? "the event" : title)!<br />
        Welcome, @UserSession.UserName!<br />
        @if (!string.IsNullOrWhiteSpace(title))
        {
            <span>Current attendance for this event: @AttendanceService.GetAttendanceCount(title)</span>
        }
    </div>
}

@code {
    [Parameter] public string? title { get; set; }

    private RegistrationModel registrationModel = new();
    private bool success = false;

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name is too long (max 100 characters)")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;
    }

    private void HandleValidSubmit()
    {
        UserSession.Register(registrationModel.Name, registrationModel.Email);
        if (!string.IsNullOrWhiteSpace(title))
        {
            AttendanceService.RegisterAttendance(title, registrationModel.Email);
        }
        success = true;
    }
}